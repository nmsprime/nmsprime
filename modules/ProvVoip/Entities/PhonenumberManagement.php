<?php

namespace Modules\ProvVoip\Entities;

use Illuminate\Support\Collection;

// Model not found? execute composer dump-autoload in nmsprime root dir
class PhonenumberManagement extends \BaseModel {

	// get functions for some address select options
	use \App\Models\AddressFunctionsTrait;

    // The associated SQL table for this Model
    public $table = 'phonenumbermanagement';

	// do not auto delete anything related to managements (ATM this can only be PhonebookEntries which will be deleted explicitely)
	protected $delete_children = False;


	// Add your validation rules here
	public static function rules($id=null)
	{
		return array(
			'phonenumber_id' => 'required|exists:phonenumber,id|min:1',
			'trcclass' => 'required|exists:trcclass,id',
			'carrier_in' => 'required|exists:carriercode,id',
			'carrier_out' => 'required|exists:carriercode,id',
			'ekp_in' => 'required|exists:ekpcode,id',
			'activation_date' => 'date',
			'deactivation_date' => 'date',
		);
	}

	// Don't forget to fill this array
	protected $fillable = [
					'phonenumber_id',
					'trcclass',
					'activation_date',
					'porting_in',
					'carrier_in',
					'ekp_in',
					'deactivation_date',
					'porting_out',
					'carrier_out',
					'ekp_out',
					'subscriber_company',
					'subscriber_department',
					'subscriber_salutation',
					'subscriber_academic_degree',
					'subscriber_firstname',
					'subscriber_lastname',
					'subscriber_street',
					'subscriber_house_number',
					'subscriber_zip',
					'subscriber_city',
					'subscriber_district',
					'subscriber_country',
					'autogenerated',
				];


	// Name of View
	public static function view_headline()
	{
		return 'Phonenumber Management';
	}

	public static function view_icon()
	{
		return '<i class="fa fa-phone text-info"></i>';
	}

	// link title in index view
	public function view_index_label()
	{
		$bsclass = $this->get_bsclass();
		$header = isset($this->phonenumber) ? 'PhonenumberManagement ('.$this->phonenumber->prefix_number.'/'.$this->phonenumber->number.')' : '';

        return ['table' => $this->table,
                'index_header' => [$this->table.'.id'],
                'bsclass' => $bsclass,
                'header' => $header];
	}

	public function get_bsclass()
	{
		return 'success';
	}

	/**
	 * ALL RELATIONS
	 * link with phonenumbers
	 */
	public function phonenumber()
	{
		return $this->belongsTo('Modules\ProvVoip\Entities\Phonenumber');
	}

	/**
	 * The envia TEL contract the related phonenumber currently belongs to
	 */
	public function envia_contract()	{
		if (!\PPModule::is_active('provvoipenvia')) {
			throw new \LogicException(__METHOD__.' only callable if module ProvVoipEnvia as active');
		}
		else {
			return $this->belongsTo('Modules\ProvVoipEnvia\Entities\EnviaContract', 'enviacontract_id');
		}
	}

	// belongs to an phonenumber
	public function view_belongs_to ()
	{
		return $this->phonenumber;
	}

	/**
	 * return a list [id => number] of all phonenumbers
	 */
	public function phonenumber_list()
	{
		$ret = array();
		foreach ($this->phonenumber()['phonenumbers'] as $phonenumber)
		{
			$ret[$phonenumber->id] = $phonenumber->prefix_number.'/'.$phonemumber->number;
		}

		return $ret;
	}

	/**
	 * return a list [id => number] of all phonenumber
	 */
	public function phonenumber_list_with_dummies()
	{
		$ret = array();
		foreach ($this->phonenumber() as $phonenumber_tmp)
		{
			foreach ($phonenumber_tmp as $phonenumber)
			{
				$ret[$phonenumber->id] = $phonenumber->prefix_number.'/'.$phonemumber->number;
			}
		}

		return $ret;
	}

	/**
	 * Get relation to trc classes.
	 *
	 * @author Patrick Reichel
	 */
	public function trc_class() {

		return $this->hasOne('Modules\ProvVoip\Entities\TRCClass', 'trcclass');
	}

	/**
	 * Get relation to envia orders.
	 *
	 * @author Patrick Reichel
	 */
	protected function _envia_orders() {

		if (!\PPModule::is_active('provvoipenvia')) {
			throw new \LogicException(__METHOD__.' only callable if module ProvVoipEnvia as active');
		}

		/* return $this->phonenumber->hasMany('Modules\ProvVoipEnvia\Entities\EnviaOrder')->withTrashed()->where('ordertype', 'NOT LIKE', 'order/create_attachment'); */
		return $this->phonenumber->enviaorders(true, "ordertype NOT LIKE 'order/create_attachment'");
	}


	/**
	 * Get relation to phonebookentry.
	 *
	 * @author Patrick Reichel
	 */
	public function phonebookentry() {

		return $this->hasOne('Modules\ProvVoip\Entities\PhonebookEntry', 'phonenumbermanagement_id');
	}


	// has zero or one phonebookentry object related
	public function view_has_one() {
		return array(
			'PhonebookEntry' => $this->phonebookentry,
		);
	}


	// View Relation.
	public function view_has_many() {

		if (\PPModule::is_active('provvoipenvia')) {

			$ret['envia TEL']['EnviaOrder']['class'] = 'EnviaOrder';
			$ret['envia TEL']['EnviaOrder']['relation'] = $this->_envia_orders;
			$ret['envia TEL']['EnviaOrder']['options']['delete_button_text'] = 'Cancel order at envia TEL';

			$ret['envia TEL']['EnviaContract']['class'] = 'EnviaContract';
			$enviacontracts = is_null($this->envia_contract) ? [] : [$this->envia_contract];
			$ret['envia TEL']['EnviaContract']['relation'] = $enviacontracts;
			$ret['envia TEL']['EnviaContract']['options']['hide_create_button'] = 1;
			$ret['envia TEL']['EnviaContract']['options']['hide_delete_button'] = 1;

			$ret['envia TEL']['PhonebookEntry']['class'] = 'PhonebookEntry';

			$relation = $this->phonebookentry;

			// can be created if no one exists, can be deleted if one exists
			if (is_null($relation)) {
				$ret['envia TEL']['PhonebookEntry']['relation'] = new Collection();
				$ret['envia TEL']['PhonebookEntry']['options']['hide_delete_button'] = 1;
			}
			else {
				$ret['envia TEL']['PhonebookEntry']['relation'] = [$relation];
				$ret['envia TEL']['PhonebookEntry']['options']['hide_create_button'] = 1;
			}

			// TODO: auth - loading controller from model could be a security issue ?
			$ret['envia TEL']['envia TEL API']['view']['view'] = 'provvoipenvia::ProvVoipEnvia.actions';
			$ret['envia TEL']['envia TEL API']['view']['vars']['extra_data'] = \Modules\ProvVoip\Http\Controllers\PhonenumberManagementController::_get_envia_management_jobs($this);
		}
		else {
			$ret = array();
		}

		return $ret;
	}


	/**
	 * Before deleting a phonenumbermanagement we have to check some things
	 *
	 * @author Patrick Reichel
	 */
	public function delete() {

		// with activated envia TEL module we have to perform some extra checks
		// we have to check this here as using ModemObserver::deleting() with return false does not prevent the monster from deleting child model instances!
		if (\PPModule::is_active('ProvVoipEnvia')) {

			// check from where the deletion request has been triggered and set the correct var to show information
			$prev = explode('?', \URL::previous())[0];
			$prev = \Str::lower($prev);

			// check if there is a not completely terminated envia TEL contract related to this management
			if ($this->envia_contract) {
				if (in_array($this->envia_contract->state, ['Aktiv', 'In Realisierung'])) {
					$msg = "Cannot delete PhonenumberManagement $this->id: There is an active or pending envia TEL contract";
					if (\Str::endsWith($prev, 'edit')) {
						\Session::push('tmp_error_above_relations', $msg);
					}
					else {
						\Session::push('tmp_error_above_index_list', $msg);
					}
					return false;
				}
				if (in_array($this->envia_contract->state, ['GekÃ¼ndigt', ])) {
					if ($this->envia_contract->end_date <= \Carbon\Carbon::now()->toDateTimeString()) {
						$msg = "Cannot delete PhonenumberManagement $this->id: There is an envia TEL contract with enddate greater or equal than today";
						if (\Str::endsWith($prev, 'edit')) {
							\Session::push('tmp_error_above_relations', $msg);
						}
						else {
							\Session::push('tmp_error_above_index_list', $msg);
						}
						return false;
					}
				}
			}

			// check start and end dates

			// remove PhonebookEntry if one
			if ($this->phonebookentry) {
				$this->phonebookentry->delete();
			}
		}


		// when arriving here: start the standard deletion procedure
		return parent::delete();
	}


	/**
	 * BOOT:
	 * - init phone observer
	 */
	public static function boot()
	{
		parent::boot();

		PhonenumberManagement::observe(new PhonenumberManagementObserver);
	}
}


/**
 * PhonenumberManagement observer class
 * Handles changes on Phonenumbers
 *
 * can handle   'creating', 'created', 'updating', 'updated',
 *              'deleting', 'deleted', 'saving', 'saved',
 *              'restoring', 'restored',
 *
 * @author Patrick Reichel
 */
class PhonenumberManagementObserver
{

	public function created($phonenumbermanagement)
	{
		$phonenumbermanagement->phonenumber->set_active_state();
	}

	public function updated($phonenumbermanagement)
	{
		$phonenumbermanagement->phonenumber->set_active_state();
	}

	public function deleted($phonenumbermanagement)
	{
		$phonenumbermanagement->phonenumber->set_active_state();
	}
}
